// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int           @id @default(autoincrement())
  phoneNumber       String?       @unique @map("phone_number")
  email             String?       @unique
  name              String?
  password          String?       // For ERP users
  role              String        @default("customer") // customer, admin, manager, employee
  profilePictureUrl String?       @map("profile_picture_url")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  lastSeen          DateTime?     @map("last_seen")
  isActive          Boolean       @default(true) @map("is_active")
  
  // Relations
  sentMessages      Message[]     @relation("SentMessages")
  contacts          Contact[]
  orders            Order[]
  customerOrders    Order[]       @relation("CustomerOrders")
  customer          Customer?
  whatsappSession   WhatsAppSession?
  ownedConversations Conversation[] @relation("OwnedConversations")
  
  @@map("users")
}

// New model to store WhatsApp session data for each user
model WhatsAppSession {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique @map("user_id")
  isConnected     Boolean  @default(false) @map("is_connected")
  connectionState String   @default("close") @map("connection_state")
  lastConnectedAt DateTime? @map("last_connected_at")
  qrCode          String?   @map("qr_code")
  authData        String?   @map("auth_data") // JSON string containing auth state
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("whatsapp_sessions")
}

model Conversation {
  id              Int       @id @default(autoincrement())
  whatsappChatId  String    @unique @map("whatsapp_chat_id")
  conversationType String   @default("individual") @map("conversation_type")
  title           String?
  isGroup         Boolean   @default(false) @map("is_group")
  // Add user who owns this conversation (whose WhatsApp received/sent messages)
  ownerId         Int?      @map("owner_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  // Relations
  messages        Message[]
  owner           User?     @relation("OwnedConversations", fields: [ownerId], references: [id])
  
  @@map("conversations")
}

model Message {
  id             Int          @id @default(autoincrement())
  conversationId Int          @map("conversation_id")
  senderId       Int?         @map("sender_id")
  messageId      String       @unique @map("message_id")
  messageType    String       @default("text") @map("message_type")
  content        String?
  mediaUrl       String?      @map("media_url")
  mediaType      String?      @map("media_type")
  isOutgoing     Boolean      @default(false) @map("is_outgoing")
  timestamp      DateTime     @default(now())
  status         String       @default("sent") // sent, delivered, read, failed
  metadata       String?      // JSON string for additional data
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User?        @relation("SentMessages", fields: [senderId], references: [id])
  
  @@map("messages")
}

model Contact {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  displayName String   @map("display_name")
  notes       String?
  addedAt     DateTime @default(now()) @map("added_at")
  tags        String?  // JSON array of tags
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("contacts")
}

model MessageTemplate {
  id              Int                @id @default(autoincrement())
  name            String             @unique
  category        String
  templateContent String             @map("template_content")
  variables       String?            // JSON array of variable names
  isActive        Boolean            @default(true) @map("is_active")
  createdAt       DateTime           @default(now()) @map("created_at")
  
  // Relations
  scheduledMessages ScheduledMessage[]
  
  @@map("message_templates")
}

model ScheduledMessage {
  id              Int             @id @default(autoincrement())
  templateId      Int?            @map("template_id")
  recipientPhone  String          @map("recipient_phone")
  scheduledFor    DateTime        @map("scheduled_for")
  customContent   String?         @map("custom_content")
  status          String          @default("pending") // pending, sent, failed, cancelled
  createdAt       DateTime        @default(now()) @map("created_at")
  sentAt          DateTime?       @map("sent_at")
  
  // Relations
  template        MessageTemplate? @relation(fields: [templateId], references: [id])
  
  @@map("scheduled_messages")
}

model BotResponse {
  id             Int      @id @default(autoincrement())
  triggerKeyword String   @map("trigger_keyword")
  responseText   String   @map("response_text")
  responseType   String   @default("text") @map("response_type") // text, image, document, template
  isActive       Boolean  @default(true) @map("is_active")
  priority       Int      @default(1)
  createdAt      DateTime @default(now()) @map("created_at")
  
  @@map("bot_responses")
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  name      String
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  lastUsed  DateTime? @map("last_used")
  
  @@map("api_keys")
}

model WebhookEvent {
  id        Int      @id @default(autoincrement())
  eventType String   @map("event_type")
  payload   String   // JSON payload
  processed Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  
  @@map("webhook_events")
}

// ERP Models
model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  
  // Relations
  products  Product[]
  
  @@map("categories")
}

model Product {
  id                Int           @id @default(autoincrement())
  name              String
  unitPrice         Float         @map("unit_price")
  costPrice         Float         @map("cost_price")
  lowStockThreshold Int           @default(10) @map("low_stock_threshold")
  currentStock      Int           @default(0) @map("current_stock")
  description       String?
  imageUrl          String?       @map("image_url")
  isActive          Boolean       @default(true) @map("is_active")
  categoryId        Int           @map("category_id")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  
  // Relations
  category          Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems        OrderItem[]
  stockMovements    StockMovement[]
  
  @@map("products")
}

model Order {
  id            Int         @id @default(autoincrement())
  orderNumber   String      @unique @map("order_number")
  customerId    Int         @map("customer_id")
  employeeId    Int?        @map("employee_id")
  status        String      @default("pending") // pending, confirmed, processing, shipped, delivered, cancelled
  totalAmount   Float       @map("total_amount")
  notes         String?
  orderDate     DateTime    @default(now()) @map("order_date")
  deliveryDate  DateTime?   @map("delivery_date")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  
  // Relations
  customer      User        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  employee      User?       @relation("CustomerOrders", fields: [employeeId], references: [id])
  orderItems    OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int     @map("order_id")
  productId Int     @map("product_id")
  quantity  Int
  unitPrice Float   @map("unit_price")
  total     Float
  
  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

model StockMovement {
  id            Int      @id @default(autoincrement())
  productId     Int      @map("product_id")
  movementType  String   @map("movement_type") // in, out, adjustment
  quantity      Int
  reason        String
  referenceId   Int?     @map("reference_id") // Could be order ID, etc.
  notes         String?
  createdAt     DateTime @default(now()) @map("created_at")
  createdBy     Int?     @map("created_by")
  
  // Relations
  product       Product  @relation(fields: [productId], references: [id])
  
  @@map("stock_movements")
}

model Customer {
  id              Int      @id @default(autoincrement())
  userId          Int?     @unique @map("user_id")
  customerNumber  String   @unique @map("customer_number")
  companyName     String?  @map("company_name")
  address         String?
  city            String?
  state           String?
  zipCode         String?  @map("zip_code")
  country         String?
  taxId           String?  @map("tax_id")
  creditLimit     Float    @default(0) @map("credit_limit")
  paymentTerms    String?  @map("payment_terms")
  notes           String?
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  user            User?    @relation(fields: [userId], references: [id])
  
  @@map("customers")
}
